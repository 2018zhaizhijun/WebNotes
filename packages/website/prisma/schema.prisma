// generator client {
//   provider = "prisma-client-js"
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "../src/app/db"
  fileName     = "types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

model Highlight {
  id              Int     @id @default(autoincrement())
  url             String  @db.VarChar(255)
  content         Json
  position        Json
  comment         Json?
  backgroundColor String? // @map(name: "background_color") @db.VarChar(20)
  privacy         Boolean @default(false)
  authorId        String  @db.Uuid // @map(name: "author_id")
  author          User    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  website         Website @relation(fields: [url], references: [url], onDelete: Cascade, onUpdate: NoAction)

  // @@map(name: "highlight")
}

model Website {
  url                String            @id @db.VarChar(255)
  title              String?           @db.VarChar(255)
  abstract           String?           @db.Text
  websiteFavoritedBy FavoriteWebsite[]
  noteFavoritedBy    FavoriteNote[]
  highlights         Highlight[]
}

model FavoriteUser {
  userId       String @db.Uuid
  followerId   String @db.Uuid
  favoriteUser User   @relation("userFollowedBy", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  follower     User   @relation("favoriteUsers", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, followerId])
}

model FavoriteWebsite {
  websiteUrl      String  @db.VarChar(255)
  websiteRename   String  @db.VarChar(255)
  tag             String  @db.VarChar(255)
  followerId      String  @db.Uuid
  favoriteWebsite Website @relation(fields: [websiteUrl], references: [url], onDelete: Cascade, onUpdate: NoAction)
  follower        User    @relation(fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([websiteUrl, followerId])
}

model FavoriteNote {
  userId          String  @db.Uuid
  websiteUrl      String  @db.VarChar(255)
  noteRename      String  @db.VarChar(255)
  tag             String  @db.VarChar(255)
  followerId      String  @db.Uuid
  favoriteUser    User    @relation("noteFollowedBy", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  favoriteWebsite Website @relation(fields: [websiteUrl], references: [url], onDelete: Cascade, onUpdate: NoAction)
  follower        User    @relation("favoriteNotes", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([websiteUrl, followerId])
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // @default(cuid())
  userId            String  @db.Uuid // @map(name: "user_id")
  type              String
  provider          String
  providerAccountId String // @map(name: "provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@map(name: "account")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // @default(cuid())
  sessionToken String   @unique // @map(name: "session_token")
  userId       String   @db.Uuid // @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@map(name: "session")
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // @default(cuid())
  name             String?           @db.VarChar(255)
  avatar           Bytes?
  email            String?           @unique
  emailVerified    DateTime? // @map(name: "email_verified")
  image            String?
  accounts         Account[]
  sessions         Session[]
  highlights       Highlight[]
  userFollowedBy   FavoriteUser[]    @relation("userFollowedBy")
  favoriteUsers    FavoriteUser[]    @relation("favoriteUsers")
  favoriteWebsites FavoriteWebsite[]
  noteFollowedBy   FavoriteNote[]    @relation("noteFollowedBy")
  favoriteNotes    FavoriteNote[]    @relation("favoriteNotes")

  // @@map(name: "user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  // @@map(name: "verificationToken")

  @@unique([identifier, token])
}
